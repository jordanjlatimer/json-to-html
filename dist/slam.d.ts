import { CSSObject, Page, SlamElement, TagAttributes, TagName, Child, ChildlessElements, ParentalElements } from "./slamInterfaces";
declare function SlamStyleApplier(element: SlamElement<TagName>, styles: CSSObject): ((element: SlamElement<ChildlessElements>) => (arg1?: undefined) => SlamElement<ChildlessElements>) | ((element: SlamElement<ParentalElements>) => (arg1?: Child | undefined, ...arg2: Child[]) => SlamElement<ParentalElements>);
declare function SlamPage<T>(arg: (args: T) => SlamElement<"html">): (args: T) => SlamElement<"html">;
declare function SlamPageBuilder(builderFunction: () => Array<Page | Promise<Page>> | Promise<Array<Page | Promise<Page>>>): () => Array<Page | Promise<Page>> | Promise<Array<Page | Promise<Page>>>;
declare function SlamComponent(arg: () => SlamElement<TagName>): () => SlamElement<TagName>;
declare function SlamComponent<T>(arg: (args: T) => SlamElement<TagName>): (args: T) => SlamElement<TagName>;
declare function SlamStyledElement<U extends ChildlessElements, T extends SlamElement<U>>(element: T, styles: CSSObject): (arg1?: TagAttributes<T>) => SlamElement<U>;
declare function SlamStyledElement<U extends ParentalElements, T extends SlamElement<U>>(element: T, styles: CSSObject): (arg1?: TagAttributes<T> | Child, ...arg2: Child[]) => SlamElement<U>;
declare function StartSlamServer(indexFile: string, port: number, watchList: string[]): Promise<void>;
declare function writeFiles(indexFile: string, outDir: string): Promise<void>;
export declare const Slam: {
    styleApplier: typeof SlamStyleApplier;
    page: typeof SlamPage;
    pageBuilder: typeof SlamPageBuilder;
    component: typeof SlamComponent;
    styledElement: typeof SlamStyledElement;
    startServer: typeof StartSlamServer;
    writeFiles: typeof writeFiles;
};
export {};
